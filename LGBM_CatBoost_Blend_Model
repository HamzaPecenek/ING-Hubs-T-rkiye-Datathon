{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ===============================================================\n# üß† CATBOOST + LIGHTGBM BLEND ‚Äî with Time-Aware Target Encoding\n# ===============================================================\n\nimport pandas as pd, numpy as np\nfrom catboost import CatBoostClassifier, Pool\nfrom sklearn.metrics import roc_auc_score, log_loss\nfrom sklearn.isotonic import IsotonicRegression\nimport lightgbm as lgb","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:17:57.653100Z","iopub.execute_input":"2025-10-19T10:17:57.653913Z","iopub.status.idle":"2025-10-19T10:17:57.660607Z","shell.execute_reply.started":"2025-10-19T10:17:57.653874Z","shell.execute_reply":"2025-10-19T10:17:57.659757Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"\n# ---------------------------------------------------------------\n# üì¶ Load engineered base features\n# ---------------------------------------------------------------\ntrain = pd.read_csv(\"/kaggle/input/feature-engineered-csvs/train_features(1).csv\")\ntest  = pd.read_csv(\"/kaggle/input/feature-engineered-csvs/test_features(1).csv\")\ntrain[\"ref_date\"] = pd.to_datetime(train[\"ref_date\"])\ntest[\"ref_date\"]  = pd.to_datetime(test[\"ref_date\"])\n\nprint(\"‚úÖ Data loaded\")\nprint(f\"Train: {train.shape} | Test: {test.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:18:05.982856Z","iopub.execute_input":"2025-10-19T10:18:05.983473Z","iopub.status.idle":"2025-10-19T10:18:08.293171Z","shell.execute_reply.started":"2025-10-19T10:18:05.983445Z","shell.execute_reply":"2025-10-19T10:18:08.292056Z"}},"outputs":[{"name":"stdout","text":"‚úÖ Data loaded\nTrain: (133287, 87) | Test: (43006, 86)\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# üßÆ Temporal deltas & ratios (3m vs 6m)\n# ---------------------------------------------------------------\ndef add_temporal_deltas(df):\n    bases = {c[:-3] for c in df.columns if c.endswith(\"_3m\") and f\"{c[:-3]}_6m\" in df.columns}\n    for base in bases:\n        c3, c6 = f\"{base}_3m\", f\"{base}_6m\"\n        df[f\"{base}_delta_3m6m\"]  = df[c3] - df[c6]\n        df[f\"{base}_ratio_3m6m\"]  = df[c3] / df[c6].replace(0, np.nan)\n        df[f\"{base}_growth_3m6m\"] = (df[c3] - df[c6]) / df[c6].replace(0, np.nan)\n    return df.replace([np.inf, -np.inf], np.nan)\n\ntrain = add_temporal_deltas(train)\ntest  = add_temporal_deltas(test)\nprint(f\"‚úÖ After deltas: Train {train.shape}, Test {test.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:18:38.395737Z","iopub.execute_input":"2025-10-19T10:18:38.396357Z","iopub.status.idle":"2025-10-19T10:18:39.094613Z","shell.execute_reply.started":"2025-10-19T10:18:38.396324Z","shell.execute_reply":"2025-10-19T10:18:39.093684Z"}},"outputs":[{"name":"stdout","text":"‚úÖ After deltas: Train (133287, 156), Test (43006, 155)\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# üß† Time-aware target encoding\n# ---------------------------------------------------------------\ndef time_aware_target_encoding(train_df, test_df, cat_cols, date_col=\"ref_date\", target=\"churn\", n_splits=4):\n    df = train_df.copy()\n    df = df.sort_values(date_col)\n    df[\"month_period\"] = df[date_col].dt.to_period(\"M\")\n    months = sorted(df[\"month_period\"].unique())\n\n    fold_size = len(months) // (n_splits + 1)\n    encoded_dfs = []\n\n    for i in range(n_splits):\n        val_months = months[-(i+1)*fold_size : -(i)*fold_size if i > 0 else None]\n        train_months = [m for m in months if m < val_months[0]]\n        train_fold = df[df[\"month_period\"].isin(train_months)]\n        val_fold   = df[df[\"month_period\"].isin(val_months)]\n\n        enc_map = train_fold.groupby(cat_cols)[target].mean().to_frame(\"enc_val\")\n        val_fold = val_fold.merge(enc_map, on=cat_cols, how=\"left\")\n        for c in cat_cols:\n            val_fold[f\"{c}_te\"] = val_fold[\"enc_val\"]\n        val_fold.drop(columns=\"enc_val\", inplace=True)\n        encoded_dfs.append(val_fold)\n\n    encoded = pd.concat(encoded_dfs).sort_index()\n    global_map = df.groupby(cat_cols)[target].mean().to_dict()\n    test_encoded = test_df.copy()\n    for c in cat_cols:\n        test_encoded[f\"{c}_te\"] = test_encoded[c].map(\n            df.groupby(c)[target].mean()\n        )\n    return encoded, test_encoded\n\n# choose which categorical features to encode\nencode_cols = [\"province\", \"work_sector\", \"work_type\"]\ntrain, test = time_aware_target_encoding(train, test, encode_cols)\nprint(f\"‚úÖ Added target encodings for: {encode_cols}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:18:59.017831Z","iopub.execute_input":"2025-10-19T10:18:59.018900Z","iopub.status.idle":"2025-10-19T10:18:59.832099Z","shell.execute_reply.started":"2025-10-19T10:18:59.018867Z","shell.execute_reply":"2025-10-19T10:18:59.831213Z"}},"outputs":[{"name":"stdout","text":"‚úÖ Added target encodings for: ['province', 'work_sector', 'work_type']\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# ‚è≥ Train-validation split (time-based)\n# ---------------------------------------------------------------\ncutoff = \"2018-11-01\"\ntrain_part = train[train[\"ref_date\"] < cutoff].copy()\nvalid_part = train[train[\"ref_date\"] >= cutoff].copy()\n\nX_train = train_part.drop(columns=[\"cust_id\",\"ref_date\",\"churn\"])\ny_train = train_part[\"churn\"]\nX_valid = valid_part.drop(columns=[\"cust_id\",\"ref_date\",\"churn\"])\ny_valid = valid_part[\"churn\"]\nX_test  = test.drop(columns=[\"cust_id\",\"ref_date\"])\n\nprint(f\"üìÖ Train {X_train.shape}, Valid {X_valid.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:19:12.441756Z","iopub.execute_input":"2025-10-19T10:19:12.442056Z","iopub.status.idle":"2025-10-19T10:19:12.636230Z","shell.execute_reply.started":"2025-10-19T10:19:12.442033Z","shell.execute_reply":"2025-10-19T10:19:12.635381Z"}},"outputs":[{"name":"stdout","text":"üìÖ Train (73737, 157), Valid (14865, 157)\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# üßπ Clean up temporary columns\n# ---------------------------------------------------------------\nfor df_ in [X_train, X_valid, X_test]:\n    if \"month_period\" in df_.columns:\n        df_.drop(columns=[\"month_period\"], inplace=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:20:43.882868Z","iopub.execute_input":"2025-10-19T10:20:43.883169Z","iopub.status.idle":"2025-10-19T10:20:43.921826Z","shell.execute_reply.started":"2025-10-19T10:20:43.883145Z","shell.execute_reply":"2025-10-19T10:20:43.920918Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# üî¢ Categorical columns\n# ---------------------------------------------------------------\ncat_cols = [\"gender\",\"province\",\"religion\",\"work_type\",\"work_sector\",\"season\"]\ncat_cols = [c for c in cat_cols if c in X_train.columns]\nfor c in cat_cols:  # LGB categorical dtype\n    X_train[c] = X_train[c].astype(\"category\")\n    X_valid[c] = X_valid[c].astype(\"category\")\n    X_test[c]  = X_test[c].astype(\"category\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:20:45.116015Z","iopub.execute_input":"2025-10-19T10:20:45.116359Z","iopub.status.idle":"2025-10-19T10:20:45.126412Z","shell.execute_reply.started":"2025-10-19T10:20:45.116332Z","shell.execute_reply":"2025-10-19T10:20:45.125454Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# ‚öñÔ∏è Class imbalance\n# ---------------------------------------------------------------\nneg, pos = np.bincount(y_train)\nscale_pos_weight = neg / pos\nprint(f\"Class weight ‚âà {scale_pos_weight:.2f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:20:46.465195Z","iopub.execute_input":"2025-10-19T10:20:46.465608Z","iopub.status.idle":"2025-10-19T10:20:46.471421Z","shell.execute_reply.started":"2025-10-19T10:20:46.465584Z","shell.execute_reply":"2025-10-19T10:20:46.470642Z"}},"outputs":[{"name":"stdout","text":"Class weight ‚âà 6.21\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"# ===============================================================\n# üöÄ Model A: CatBoost\n# ===============================================================\ntrain_pool = Pool(X_train, y_train, cat_features=cat_cols)\nvalid_pool = Pool(X_valid, y_valid, cat_features=cat_cols)\n\ncb = CatBoostClassifier(\n    iterations=3000, learning_rate=0.03, depth=8, l2_leaf_reg=3,\n    random_seed=42, loss_function=\"Logloss\", eval_metric=\"AUC\",\n    class_weights=[1.0, scale_pos_weight], od_type=\"Iter\", od_wait=200,\n    task_type=\"CPU\", verbose=False\n)\nprint(\"\\nüöÄ Training CatBoost...\")\ncb.fit(train_pool, eval_set=valid_pool, use_best_model=True, verbose=False)\ncb_val = cb.predict_proba(X_valid)[:,1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:20:48.943760Z","iopub.execute_input":"2025-10-19T10:20:48.944571Z","iopub.status.idle":"2025-10-19T10:22:03.269161Z","shell.execute_reply.started":"2025-10-19T10:20:48.944539Z","shell.execute_reply":"2025-10-19T10:22:03.268412Z"}},"outputs":[{"name":"stdout","text":"\nüöÄ Training CatBoost...\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"# ===============================================================\n# üöÄ Model B: LightGBM\n# ===============================================================\nlgbm = lgb.LGBMClassifier(\n    n_estimators=5000, learning_rate=0.02, num_leaves=64,\n    subsample=0.8, colsample_bytree=0.8, reg_alpha=0.1, reg_lambda=0.5,\n    objective=\"binary\", metric=\"auc\", random_state=42,\n    n_jobs=-1, scale_pos_weight=scale_pos_weight\n)\nprint(\"\\nüöÄ Training LightGBM...\")\nlgbm.fit(X_train, y_train,\n         eval_set=[(X_valid, y_valid)],\n         eval_metric=\"auc\",\n         callbacks=[lgb.early_stopping(300, verbose=False)])\nlgb_val = lgbm.predict_proba(X_valid)[:,1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:22:30.100545Z","iopub.execute_input":"2025-10-19T10:22:30.100855Z","iopub.status.idle":"2025-10-19T10:22:47.272797Z","shell.execute_reply.started":"2025-10-19T10:22:30.100832Z","shell.execute_reply":"2025-10-19T10:22:47.272001Z"}},"outputs":[{"name":"stdout","text":"\nüöÄ Training LightGBM...\n[LightGBM] [Info] Number of positive: 10230, number of negative: 63507\n[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.079428 seconds.\nYou can set `force_col_wise=true` to remove the overhead.\n[LightGBM] [Info] Total Bins 26741\n[LightGBM] [Info] Number of data points in the train set: 73737, number of used features: 150\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.138736 -> initscore=-1.825826\n[LightGBM] [Info] Start training from score -1.825826\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"# ===============================================================\n# üîó Blend optimization\n# ===============================================================\nweights = np.linspace(0,1,51)\nbest_w, best_ll = None, 9e9\nfor w in weights:\n    blend = w*cb_val + (1-w)*lgb_val\n    ll = log_loss(y_valid, blend)\n    if ll < best_ll:\n        best_ll, best_w = ll, w\nprint(f\"üîé Best CatBoost weight = {best_w:.2f}, LogLoss = {best_ll:.5f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:22:52.865723Z","iopub.execute_input":"2025-10-19T10:22:52.865999Z","iopub.status.idle":"2025-10-19T10:22:53.063888Z","shell.execute_reply.started":"2025-10-19T10:22:52.865980Z","shell.execute_reply":"2025-10-19T10:22:53.063085Z"}},"outputs":[{"name":"stdout","text":"üîé Best CatBoost weight = 0.00, LogLoss = 0.54833\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"# ===============================================================\n# üéØ Calibration\n# ===============================================================\nblend_val = best_w*cb_val + (1-best_w)*lgb_val\niso = IsotonicRegression(out_of_bounds='clip')\niso.fit(blend_val, y_valid)\nblend_val_cal = iso.predict(blend_val)\nprint(f\"üéØ Calibrated LogLoss: {log_loss(y_valid, blend_val_cal):.5f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:23:06.448337Z","iopub.execute_input":"2025-10-19T10:23:06.448623Z","iopub.status.idle":"2025-10-19T10:23:06.465116Z","shell.execute_reply.started":"2025-10-19T10:23:06.448602Z","shell.execute_reply":"2025-10-19T10:23:06.464142Z"}},"outputs":[{"name":"stdout","text":"üéØ Calibrated LogLoss: 0.35580\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"# ===============================================================\n# üíæ Test predictions & submissions\n# ===============================================================\ncb_test  = cb.predict_proba(X_test)[:,1]\nlgb_test = lgbm.predict_proba(X_test)[:,1]\nblend_test = best_w*cb_test + (1-best_w)*lgb_test\nblend_test_cal = iso.predict(blend_test)\n\npd.DataFrame({\"cust_id\":test[\"cust_id\"],\"churn\":blend_test}).to_csv(\n    \"submission_blend_te_uncalibrated.csv\",index=False)\npd.DataFrame({\"cust_id\":test[\"cust_id\"],\"churn\":blend_test_cal}).to_csv(\n    \"submission_blend_te_calibrated.csv\",index=False)\n\nprint(\"üíæ Saved: submission_blend_te_calibrated.csv (recommended)\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:23:17.036068Z","iopub.execute_input":"2025-10-19T10:23:17.036680Z","iopub.status.idle":"2025-10-19T10:23:17.477984Z","shell.execute_reply.started":"2025-10-19T10:23:17.036655Z","shell.execute_reply":"2025-10-19T10:23:17.477300Z"}},"outputs":[{"name":"stdout","text":"üíæ Saved: submission_blend_te_calibrated.csv (recommended)\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"# ===============================================================\n# üìä Final Local Summary (with Target Encoding)\n# ===============================================================\nfrom sklearn.metrics import roc_auc_score, log_loss\n\n# --- Recompute metrics clearly ---\ncb_val_auc  = roc_auc_score(y_valid, cb_val)\ncb_val_ll   = log_loss(y_valid, cb_val)\n\nlgb_val_auc = roc_auc_score(y_valid, lgb_val)\nlgb_val_ll  = log_loss(y_valid, lgb_val)\n\nblend_val   = best_w * cb_val + (1 - best_w) * lgb_val\nblend_auc   = roc_auc_score(y_valid, blend_val)\nblend_ll    = log_loss(y_valid, blend_val)\n\nblend_val_cal = iso.predict(blend_val)\nblend_auc_cal = roc_auc_score(y_valid, blend_val_cal)\nblend_ll_cal  = log_loss(y_valid, blend_val_cal)\n\n# --- Print clean summary table ---\nprint(\"\\nüìä Local Validation Summary (with Target Encoding)\")\nprint(f\"CatBoost              ‚Üí AUC: {cb_val_auc:.5f} | LogLoss: {cb_val_ll:.5f}\")\nprint(f\"LightGBM              ‚Üí AUC: {lgb_val_auc:.5f} | LogLoss: {lgb_val_ll:.5f}\")\nprint(f\"Blend (uncalibrated)  ‚Üí AUC: {blend_auc:.5f} | LogLoss: {blend_ll:.5f}  (w={best_w:.2f})\")\nprint(f\"Blend (calibrated)    ‚Üí AUC: {blend_auc_cal:.5f} | LogLoss: {blend_ll_cal:.5f}   ‚úÖ use this for LB\")\n\n\nimport matplotlib.pyplot as plt\n\nmodels = [\"CatBoost\", \"LightGBM\", \"Blend (uncal.)\", \"Blend (cal.)\"]\nauc_scores = [cb_val_auc, lgb_val_auc, blend_auc, blend_auc_cal]\nll_scores = [cb_val_ll, lgb_val_ll, blend_ll, blend_ll_cal]\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 4))\nax[0].bar(models, auc_scores, color=\"skyblue\")\nax[0].set_title(\"Validation AUC ‚Üë\")\nax[0].set_ylim(0.65, 0.75)\n\nax[1].bar(models, ll_scores, color=\"salmon\")\nax[1].set_title(\"Validation LogLoss ‚Üì\")\n\nfor a in ax: a.grid(axis='y', linestyle='--', alpha=0.5)\nplt.tight_layout()\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-19T10:25:44.130085Z","iopub.execute_input":"2025-10-19T10:25:44.130714Z","iopub.status.idle":"2025-10-19T10:25:44.550115Z","shell.execute_reply.started":"2025-10-19T10:25:44.130684Z","shell.execute_reply":"2025-10-19T10:25:44.549175Z"}},"outputs":[{"name":"stdout","text":"\nüìä Local Validation Summary (with Target Encoding)\nCatBoost              ‚Üí AUC: 0.71127 | LogLoss: 0.58642\nLightGBM              ‚Üí AUC: 0.70720 | LogLoss: 0.54833\nBlend (uncalibrated)  ‚Üí AUC: 0.70720 | LogLoss: 0.54833  (w=0.00)\nBlend (calibrated)    ‚Üí AUC: 0.71009 | LogLoss: 0.35580   ‚úÖ use this for LB\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}