{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":116092,"databundleVersionId":13860829,"sourceType":"competition"},{"sourceId":13424641,"sourceType":"datasetVersion","datasetId":8520630}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ===============================================================\n# üß† Time-based LightGBM with Purged Rolling CV + Random Search (Silent)\n# ===============================================================\nimport pandas as pd, numpy as np, lightgbm as lgb, warnings, os, sys\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import ParameterSampler\nfrom datetime import datetime\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nos.environ[\"PYTHONWARNINGS\"] = \"ignore\"\n\n# Helper class to silence LightGBM & sklearn outputs\nclass HiddenPrints:\n    def __enter__(self):\n        self._original_stdout = sys.stdout\n        sys.stdout = open(os.devnull, \"w\")\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        sys.stdout.close()\n        sys.stdout = self._original_stdout\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-18T14:41:54.940316Z","iopub.execute_input":"2025-10-18T14:41:54.941193Z","iopub.status.idle":"2025-10-18T14:41:54.947180Z","shell.execute_reply.started":"2025-10-18T14:41:54.941153Z","shell.execute_reply":"2025-10-18T14:41:54.946216Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# ---------- Load engineered features ----------\ntrain = pd.read_csv(\"/kaggle/input/feature-engineered-csvs/train_features(1).csv\")\ntest  = pd.read_csv(\"/kaggle/input/feature-engineered-csvs/test_features(1).csv\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-18T14:42:08.923009Z","iopub.execute_input":"2025-10-18T14:42:08.923295Z","iopub.status.idle":"2025-10-18T14:42:11.072361Z","shell.execute_reply.started":"2025-10-18T14:42:08.923276Z","shell.execute_reply":"2025-10-18T14:42:11.071622Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# ---------- Basic prep ----------\nDATE_COL = \"ref_date\"\nID_COL   = \"cust_id\"\nTARGET   = \"churn\"\n\ntrain[DATE_COL] = pd.to_datetime(train[DATE_COL])\ntest[DATE_COL]  = pd.to_datetime(test[DATE_COL])\n\ndrop_cols = [ID_COL, DATE_COL]\nif TARGET in train.columns:\n    drop_cols.append(TARGET)\nfeature_cols = [c for c in train.columns if c not in drop_cols]\n\ncat_cols = [c for c in [\"gender\",\"province\",\"religion\",\"work_type\",\"work_sector\",\"season\"] if c in feature_cols]\nfor c in cat_cols:\n    train[c] = train[c].astype(\"category\")\n    test[c]  = test[c].astype(\"category\")\n\nX = train[feature_cols].copy()\ny = train[TARGET].copy()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-18T14:42:26.060290Z","iopub.execute_input":"2025-10-18T14:42:26.060615Z","iopub.status.idle":"2025-10-18T14:42:26.212426Z","shell.execute_reply.started":"2025-10-18T14:42:26.060562Z","shell.execute_reply":"2025-10-18T14:42:26.211483Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# ---------- Time-based folds ----------\ndef build_time_folds(df_dates, n_splits=4, val_months=1, gap_months=1, min_train_blocks=3):\n    months = df_dates.dt.to_period(\"M\")\n    uniq = months.sort_values().unique()\n    folds = []\n    for val_end_pos in range(min_train_blocks + gap_months + val_months, len(uniq) + 1):\n        val_start_pos = val_end_pos - val_months\n        gap_start_pos = val_start_pos - gap_months\n        train_end_pos = gap_start_pos\n        if train_end_pos < min_train_blocks:\n            continue\n        folds.append((uniq[:train_end_pos], uniq[val_start_pos:val_end_pos]))\n    folds = folds[-n_splits:]\n    idx_pairs = []\n    for train_months, valid_months in folds:\n        tr_idx = months[months.isin(train_months)].index.values\n        va_idx = months[months.isin(valid_months)].index.values\n        idx_pairs.append((tr_idx, va_idx))\n    return idx_pairs\n\nfolds = build_time_folds(train[DATE_COL], n_splits=4, val_months=1, gap_months=1, min_train_blocks=3)\nprint(f\"Built {len(folds)} time folds.\")\n\ndef compute_scale_pos_weight(y):\n    neg, pos = np.bincount(y.astype(int))\n    return max(1.0, neg / max(1, pos))\n\n# ---------- Hyperparameter space ----------\nparam_space = {\n    \"learning_rate\":   [0.03, 0.05, 0.07],\n    \"num_leaves\":      [32, 48, 64],\n    \"max_depth\":       [6, 8, -1],\n    \"min_data_in_leaf\":[100, 200, 400],\n    \"subsample\":       [0.7, 0.8, 0.9],\n    \"colsample_bytree\":[0.7, 0.8, 0.9],\n    \"reg_alpha\":       [0.0, 0.1, 0.3],\n    \"reg_lambda\":      [0.0, 0.3, 0.6],\n}\n\nn_iter = 25\nsampler = list(ParameterSampler(param_space, n_iter=n_iter, random_state=42))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-18T14:42:54.037192Z","iopub.execute_input":"2025-10-18T14:42:54.037633Z","iopub.status.idle":"2025-10-18T14:42:54.088617Z","shell.execute_reply.started":"2025-10-18T14:42:54.037569Z","shell.execute_reply":"2025-10-18T14:42:54.087832Z"}},"outputs":[{"name":"stdout","text":"Built 4 time folds.\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# ---------- CV evaluation ----------\ndef cv_score(params):\n    aucs = []\n    for fold_i, (tr_idx, va_idx) in enumerate(folds, 1):\n        X_tr, y_tr = X.iloc[tr_idx], y.iloc[tr_idx]\n        X_va, y_va = X.iloc[va_idx], y.iloc[va_idx]\n\n        spw = compute_scale_pos_weight(y_tr)\n        model = LGBMClassifier(\n            n_estimators=3000,\n            objective=\"binary\",\n            random_state=42,\n            n_jobs=-1,\n            learning_rate=params[\"learning_rate\"],\n            num_leaves=params[\"num_leaves\"],\n            max_depth=params[\"max_depth\"],\n            min_data_in_leaf=params[\"min_data_in_leaf\"],\n            subsample=params[\"subsample\"],\n            colsample_bytree=params[\"colsample_bytree\"],\n            reg_alpha=params[\"reg_alpha\"],\n            reg_lambda=params[\"reg_lambda\"],\n            scale_pos_weight=spw,\n            verbose=-1\n        )\n\n        with HiddenPrints():  # suppress LightGBM internal prints\n            model.fit(\n                X_tr, y_tr,\n                eval_set=[(X_va, y_va)],\n                eval_metric=\"auc\",\n                categorical_feature=cat_cols,\n                callbacks=[lgb.early_stopping(200, verbose=False)]\n            )\n\n        va_pred = model.predict_proba(X_va)[:, 1]\n        aucs.append(roc_auc_score(y_va, va_pred))\n    return float(np.mean(aucs)), aucs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-18T14:43:10.346528Z","iopub.execute_input":"2025-10-18T14:43:10.347176Z","iopub.status.idle":"2025-10-18T14:43:10.354128Z","shell.execute_reply.started":"2025-10-18T14:43:10.347148Z","shell.execute_reply":"2025-10-18T14:43:10.353263Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# ---------- Random Search ----------\nbest_params, best_cv, best_each = None, -1.0, None\nfor i, params in enumerate(sampler, 1):\n    mean_auc, fold_aucs = cv_score(params)\n    if mean_auc > best_cv:\n        best_cv, best_params, best_each = mean_auc, params, fold_aucs\n    print(f\"[{i:02d}/{n_iter}] CV AUC={mean_auc:.5f}  | per-fold={list(map(lambda x: round(x,5), fold_aucs))}\")\n\nprint(\"\\nüéØ Best params:\", best_params)\nprint(f\"üèÅ Best mean CV AUC: {best_cv:.5f}  | per-fold={list(map(lambda x: round(x,5), best_each))}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-18T14:43:20.805548Z","iopub.execute_input":"2025-10-18T14:43:20.805876Z","iopub.status.idle":"2025-10-18T14:51:22.354478Z","shell.execute_reply.started":"2025-10-18T14:43:20.805854Z","shell.execute_reply":"2025-10-18T14:51:22.353837Z"}},"outputs":[{"name":"stdout","text":"[01/25] CV AUC=0.68936  | per-fold=[0.69025, 0.67393, 0.6968, 0.69644]\n[02/25] CV AUC=0.69120  | per-fold=[0.68675, 0.67804, 0.70309, 0.69692]\n[03/25] CV AUC=0.68766  | per-fold=[0.68764, 0.67032, 0.69762, 0.69507]\n[04/25] CV AUC=0.68752  | per-fold=[0.6905, 0.67484, 0.69202, 0.69271]\n[05/25] CV AUC=0.68655  | per-fold=[0.68836, 0.67224, 0.69017, 0.69543]\n[06/25] CV AUC=0.68941  | per-fold=[0.69358, 0.67641, 0.69142, 0.69626]\n[07/25] CV AUC=0.69182  | per-fold=[0.68943, 0.67607, 0.70355, 0.69822]\n[08/25] CV AUC=0.69019  | per-fold=[0.69102, 0.67756, 0.69412, 0.69805]\n[09/25] CV AUC=0.69211  | per-fold=[0.68803, 0.67385, 0.70386, 0.70269]\n[10/25] CV AUC=0.68980  | per-fold=[0.68808, 0.67429, 0.70084, 0.696]\n[11/25] CV AUC=0.69146  | per-fold=[0.68683, 0.68338, 0.70041, 0.69521]\n[12/25] CV AUC=0.69094  | per-fold=[0.68958, 0.67581, 0.703, 0.69535]\n[13/25] CV AUC=0.68798  | per-fold=[0.69083, 0.67329, 0.69141, 0.69639]\n[14/25] CV AUC=0.68879  | per-fold=[0.68832, 0.67638, 0.69392, 0.69656]\n[15/25] CV AUC=0.69010  | per-fold=[0.6912, 0.67721, 0.69956, 0.69245]\n[16/25] CV AUC=0.68725  | per-fold=[0.69039, 0.67681, 0.68909, 0.6927]\n[17/25] CV AUC=0.69270  | per-fold=[0.69025, 0.67393, 0.70291, 0.70373]\n[18/25] CV AUC=0.69225  | per-fold=[0.6926, 0.67651, 0.70112, 0.69878]\n[19/25] CV AUC=0.69089  | per-fold=[0.6879, 0.68141, 0.6949, 0.69937]\n[20/25] CV AUC=0.69161  | per-fold=[0.68893, 0.67299, 0.70161, 0.70291]\n[21/25] CV AUC=0.68932  | per-fold=[0.68868, 0.67306, 0.70416, 0.69137]\n[22/25] CV AUC=0.69339  | per-fold=[0.69123, 0.67721, 0.70565, 0.69948]\n[23/25] CV AUC=0.68954  | per-fold=[0.68884, 0.67277, 0.70166, 0.6949]\n[24/25] CV AUC=0.69074  | per-fold=[0.68878, 0.67394, 0.70172, 0.6985]\n[25/25] CV AUC=0.68963  | per-fold=[0.69041, 0.67306, 0.70382, 0.69124]\n\nüéØ Best params: {'subsample': 0.7, 'reg_lambda': 0.3, 'reg_alpha': 0.0, 'num_leaves': 32, 'min_data_in_leaf': 100, 'max_depth': 8, 'learning_rate': 0.03, 'colsample_bytree': 0.8}\nüèÅ Best mean CV AUC: 0.69339  | per-fold=[0.69123, 0.67721, 0.70565, 0.69948]\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# ---------- Final model ----------\nspw_full = compute_scale_pos_weight(y)\nfinal_model = LGBMClassifier(\n    n_estimators=3000,\n    objective=\"binary\",\n    random_state=42,\n    n_jobs=-1,\n    scale_pos_weight=spw_full,\n    **best_params\n)\n\nmost_recent_month = train[DATE_COL].dt.to_period(\"M\").max()\nmask_val = train[DATE_COL].dt.to_period(\"M\") == most_recent_month\nX_tr_full, y_tr_full = X.loc[~mask_val], y.loc[~mask_val]\nX_va_full, y_va_full = X.loc[mask_val],  y.loc[mask_val]\n\nwith HiddenPrints():\n    final_model.fit(\n        X_tr_full, y_tr_full,\n        eval_set=[(X_va_full, y_va_full)],\n        eval_metric=\"auc\",\n        categorical_feature=cat_cols,\n        callbacks=[lgb.early_stopping(200, verbose=False)]\n    )\n\nprint(\"\\n‚úÖ Final model trained with best parameters.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-18T14:51:29.894281Z","iopub.execute_input":"2025-10-18T14:51:29.894962Z","iopub.status.idle":"2025-10-18T14:51:35.221677Z","shell.execute_reply.started":"2025-10-18T14:51:29.894935Z","shell.execute_reply":"2025-10-18T14:51:35.220388Z"}},"outputs":[{"name":"stdout","text":"\n‚úÖ Final model trained with best parameters.\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# ---------- Predict Test ----------\ntest_pred = final_model.predict_proba(test[feature_cols])[:, 1]\nsubmission = pd.DataFrame({\"cust_id\": test[ID_COL], \"churn\": test_pred})\nsubmission.to_csv(\"submission.csv\", index=False)\nprint(\"üíæ submission.csv saved!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-18T14:51:38.427082Z","iopub.execute_input":"2025-10-18T14:51:38.427361Z","iopub.status.idle":"2025-10-18T14:51:38.564839Z","shell.execute_reply.started":"2025-10-18T14:51:38.427342Z","shell.execute_reply":"2025-10-18T14:51:38.564058Z"}},"outputs":[{"name":"stdout","text":"üíæ submission.csv saved!\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"# ===============================================================\n# üìä Local Score Estimation + Progress Visualization\n# ===============================================================\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_auc_score, log_loss\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport os\n\n# --- Predict on the validation split used for early stopping ---\nval_preds = final_model.predict_proba(X_va_full)[:, 1]\n\n# --- Compute metrics ---\nval_auc = roc_auc_score(y_va_full, val_preds)\nval_logloss = log_loss(y_va_full, val_preds, eps=1e-15)\nblended_score = (1 - val_auc) * 0.7 + val_logloss * 0.3\n\nprint(f\"üîπ Validation AUC: {val_auc:.5f}  (Higher is better)\")\nprint(f\"üîπ Validation Log Loss: {val_logloss:.5f}  (Lower is better)\")\nprint(f\"‚öôÔ∏è  Heuristic blended score (lower likely better): {blended_score:.5f}\")\n\n# --- Log metrics to file ---\nlog_path = \"local_validation_log.txt\"\nwith open(log_path, \"a\") as f:\n    f.write(f\"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | AUC={val_auc:.5f} | LogLoss={val_logloss:.5f}\\n\")\n\nprint(f\"\\nüßæ Logged this run to {log_path}\")\n\n# --- Read and plot metric history if file exists ---\nif os.path.exists(log_path):\n    logs = []\n    with open(log_path, \"r\") as f:\n        for line in f:\n            try:\n                parts = line.strip().split(\"|\")\n                date_str = parts[0].strip()\n                auc_val = float(parts[1].split(\"=\")[1])\n                logloss_val = float(parts[2].split(\"=\")[1])\n                logs.append((date_str, auc_val, logloss_val))\n            except:\n                pass\n\n    if len(logs) > 0:\n        df = pd.DataFrame(logs, columns=[\"timestamp\", \"AUC\", \"LogLoss\"])\n        df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n        plt.figure(figsize=(8,4))\n        plt.plot(df[\"timestamp\"], df[\"AUC\"], marker=\"o\", label=\"AUC (higher=better)\")\n        plt.plot(df[\"timestamp\"], df[\"LogLoss\"], marker=\"x\", label=\"LogLoss (lower=better)\")\n        plt.title(\"üìà Local Validation Metric History\")\n        plt.xlabel(\"Run Timestamp\")\n        plt.ylabel(\"Score\")\n        plt.legend()\n        plt.grid(True, linestyle=\"--\", alpha=0.5)\n        plt.tight_layout()\n        plt.show()\n\n        print(\"\\nüïì Metric history (latest 5 runs):\")\n        display(df.tail(5))\n    else:\n        print(\"No previous log entries found yet.\")\nelse:\n    print(\"No log file found yet ‚Äî first run will create one.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-18T14:51:41.353938Z","iopub.execute_input":"2025-10-18T14:51:41.354578Z","iopub.status.idle":"2025-10-18T14:51:41.772029Z","shell.execute_reply.started":"2025-10-18T14:51:41.354549Z","shell.execute_reply":"2025-10-18T14:51:41.771319Z"}},"outputs":[{"name":"stdout","text":"üîπ Validation AUC: 0.69672  (Higher is better)\nüîπ Validation Log Loss: 0.38646  (Lower is better)\n‚öôÔ∏è  Heuristic blended score (lower likely better): 0.32823\n\nüßæ Logged this run to local_validation_log.txt\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nüïì Metric history (latest 5 runs):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"            timestamp      AUC  LogLoss\n0 2025-10-18 14:51:41  0.69672  0.38646","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>timestamp</th>\n      <th>AUC</th>\n      <th>LogLoss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-10-18 14:51:41</td>\n      <td>0.69672</td>\n      <td>0.38646</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}