{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ===============================================================\n# ðŸ§± ING Hubs TÃ¼rkiye Datathon â€” Feature Engineering v4\n# ===============================================================\n# Hybrid of v2 (stable) + v3 (recency & activity)\n# Clean, leak-free, noise-controlled\n# ===============================================================\n\nimport pandas as pd, numpy as np\nfrom tqdm import tqdm","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-20T14:18:38.964698Z","iopub.execute_input":"2025-10-20T14:18:38.965307Z","iopub.status.idle":"2025-10-20T14:18:39.321295Z","shell.execute_reply.started":"2025-10-20T14:18:38.965277Z","shell.execute_reply":"2025-10-20T14:18:39.320493Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# Load Data\n# ---------------------------------------------------------------\ncustomers = pd.read_csv(\"/kaggle/input/ing-hubs-turkiye-datathon/customers.csv\")\ncustomer_history = pd.read_csv(\"/kaggle/input/ing-hubs-turkiye-datathon/customer_history.csv\")\nreference_data = pd.read_csv(\"/kaggle/input/ing-hubs-turkiye-datathon/referance_data.csv\")\nreference_data_test = pd.read_csv(\"/kaggle/input/ing-hubs-turkiye-datathon/referance_data_test.csv\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T14:18:47.431886Z","iopub.execute_input":"2025-10-20T14:18:47.432514Z","iopub.status.idle":"2025-10-20T14:18:53.560827Z","shell.execute_reply.started":"2025-10-20T14:18:47.432476Z","shell.execute_reply":"2025-10-20T14:18:53.559866Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# Helper: Monthly Aggregates\n# ---------------------------------------------------------------\ncustomer_history[\"date\"] = pd.to_datetime(customer_history[\"date\"])\ncustomer_history[\"month\"] = customer_history[\"date\"].dt.to_period(\"M\")\nmonthly = (\n    customer_history.groupby([\"cust_id\", \"month\"], as_index=False)\n    .agg({\n        \"mobile_eft_all_cnt\": \"sum\",\n        \"mobile_eft_all_amt\": \"sum\",\n        \"cc_transaction_all_cnt\": \"sum\",\n        \"cc_transaction_all_amt\": \"sum\",\n        \"active_product_category_nbr\": \"mean\"\n    })\n    .sort_values([\"cust_id\", \"month\"])\n)\nmonthly[\"month_start\"] = monthly[\"month\"].dt.to_timestamp(how=\"start\")\nmonthly[\"any_tx\"] = ((monthly[\"mobile_eft_all_cnt\"] + monthly[\"cc_transaction_all_cnt\"]) > 0).astype(int)\n\n# Recency metrics\nlast_active = (\n    monthly[monthly[\"any_tx\"] == 1]\n    .groupby(\"cust_id\", as_index=False)[\"month_start\"].max()\n    .rename(columns={\"month_start\": \"last_active_month\"})\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T14:18:58.272878Z","iopub.execute_input":"2025-10-20T14:18:58.273213Z","iopub.status.idle":"2025-10-20T14:19:03.260623Z","shell.execute_reply.started":"2025-10-20T14:18:58.273190Z","shell.execute_reply":"2025-10-20T14:19:03.259713Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# Helper: Rolling Activity Metrics (6m)\n# ---------------------------------------------------------------\nmonthly[\"active_months_6m\"] = (\n    monthly.groupby(\"cust_id\")[\"any_tx\"].transform(lambda x: x.shift(1).rolling(6).sum())\n)\nmonthly[\"active_ratio_6m\"] = (\n    monthly.groupby(\"cust_id\")[\"any_tx\"].transform(lambda x: x.shift(1).rolling(6).mean())\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T14:19:08.184217Z","iopub.execute_input":"2025-10-20T14:19:08.185266Z","iopub.status.idle":"2025-10-20T14:21:14.898014Z","shell.execute_reply.started":"2025-10-20T14:19:08.185214Z","shell.execute_reply":"2025-10-20T14:21:14.897153Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# Core Feature Builder â€” Feature Engineering v4 (safe version)\n# ---------------------------------------------------------------\ndef build_features(ref_df, monthly, customers, windows=[1,3,6]):\n    # --- Ensure datetime consistency early ---\n    ref_df = ref_df.copy()\n    ref_df[\"ref_date\"] = pd.to_datetime(ref_df[\"ref_date\"], errors=\"coerce\")\n\n    df_hist = customer_history.copy()\n    df_hist[\"date\"] = pd.to_datetime(df_hist[\"date\"], errors=\"coerce\")\n\n    df = ref_df.copy()\n\n    feats = []\n    for w in tqdm(windows, desc=\"Windows\"):\n        tmp = df[[\"cust_id\", \"ref_date\"]].copy()\n        merged = tmp.merge(df_hist, on=\"cust_id\", how=\"left\")\n\n        # time-based mask\n        mask = (merged[\"date\"] < merged[\"ref_date\"]) & (\n            merged[\"date\"] >= merged[\"ref_date\"] - pd.DateOffset(months=w)\n        )\n        merged = merged[mask]\n\n        # aggregate stats\n        agg = merged.groupby(\"cust_id\")[[\n            \"mobile_eft_all_cnt\", \"mobile_eft_all_amt\",\n            \"cc_transaction_all_cnt\", \"cc_transaction_all_amt\",\n            \"active_product_category_nbr\"\n        ]].agg([\"mean\", \"std\", \"min\", \"max\"]).reset_index()\n\n        agg.columns = [\"cust_id\"] + [\n            f\"{col}_{stat}_{w}m\" for col, stat in agg.columns if col != \"cust_id\"\n        ]\n\n        # volatility\n        for col in [\n            \"mobile_eft_all_cnt\", \"mobile_eft_all_amt\",\n            \"cc_transaction_all_cnt\", \"cc_transaction_all_amt\",\n            \"active_product_category_nbr\"\n        ]:\n            agg[f\"{col}_volatility_{w}m\"] = (\n                agg[f\"{col}_std_{w}m\"] / (agg[f\"{col}_mean_{w}m\"] + 1e-6)\n            )\n\n        tmp = tmp.merge(agg, on=\"cust_id\", how=\"left\")\n        feats.append(tmp)\n\n    # merge all window aggregates\n    base = feats[0]\n    for extra in feats[1:]:\n        base = base.merge(extra, on=[\"cust_id\", \"ref_date\"], how=\"left\")\n\n    # Ratios\n    for w in windows:\n        base[f\"eft_to_cc_cnt_ratio_{w}m\"] = base[f\"mobile_eft_all_cnt_mean_{w}m\"] / (\n            base[f\"cc_transaction_all_cnt_mean_{w}m\"] + 1\n        )\n        base[f\"eft_to_cc_amt_ratio_{w}m\"] = base[f\"mobile_eft_all_amt_mean_{w}m\"] / (\n            base[f\"cc_transaction_all_amt_mean_{w}m\"] + 1\n        )\n        base[f\"amt_per_tx_{w}m\"] = (\n            (base[f\"mobile_eft_all_amt_mean_{w}m\"] + base[f\"cc_transaction_all_amt_mean_{w}m\"])\n            / (base[f\"mobile_eft_all_cnt_mean_{w}m\"] + base[f\"cc_transaction_all_cnt_mean_{w}m\"] + 1)\n        )\n\n    # Demographics\n    demo = customers.copy()\n    demo[\"age_tenure_interaction\"] = demo[\"age\"] * demo[\"tenure\"]\n    base = base.merge(demo, on=\"cust_id\", how=\"left\")\n\n    # Temporal context\n    base[\"ref_date\"] = pd.to_datetime(base[\"ref_date\"], errors=\"coerce\")\n    base[\"month_of_ref_date\"] = base[\"ref_date\"].dt.month\n    base[\"quarter_of_ref_date\"] = base[\"ref_date\"].dt.quarter\n    base[\"ref_year\"] = base[\"ref_date\"].dt.year\n    season_map = {\n        12: \"Winter\", 1: \"Winter\", 2: \"Winter\",\n        3: \"Spring\", 4: \"Spring\", 5: \"Spring\",\n        6: \"Summer\", 7: \"Summer\", 8: \"Summer\",\n        9: \"Fall\", 10: \"Fall\", 11: \"Fall\"\n    }\n    base[\"season\"] = base[\"month_of_ref_date\"].map(season_map)\n\n    # Recency + activity\n    base = base.merge(last_active, on=\"cust_id\", how=\"left\")\n    base[\"days_since_last_active\"] = (base[\"ref_date\"] - base[\"last_active_month\"]).dt.days.fillna(9999)\n    recent = monthly.groupby(\"cust_id\").tail(1)[[\"cust_id\", \"active_months_6m\", \"active_ratio_6m\"]]\n    base = base.merge(recent, on=\"cust_id\", how=\"left\")\n\n    # Drop flags placeholders\n    for flag_col in [\n        \"eft_cnt_drop30_vs_6m\", \"eft_amt_drop30_vs_6m\",\n        \"cc_cnt_drop30_vs_6m\", \"cc_amt_drop30_vs_6m\"\n    ]:\n        base[flag_col] = 0\n\n    # Categorical interactions\n    for c1, c2 in [\n        (\"province\", \"work_sector\"),\n        (\"gender\", \"religion\"),\n        (\"work_type\", \"season\")\n    ]:\n        if c1 in base.columns and c2 in base.columns:\n            base[f\"{c1}_{c2}\"] = base[c1].astype(str) + \"_\" + base[c2].astype(str)\n\n    # --- FIXED MERGE: enforce datetime type on both sides ---\n    if \"churn\" in ref_df.columns:\n        ref_df[\"ref_date\"] = pd.to_datetime(ref_df[\"ref_date\"], errors=\"coerce\")\n        base[\"ref_date\"] = pd.to_datetime(base[\"ref_date\"], errors=\"coerce\")\n        base = base.merge(\n            ref_df[[\"cust_id\", \"ref_date\", \"churn\"]],\n            on=[\"cust_id\", \"ref_date\"], how=\"left\"\n        )\n\n    # Final cleanup\n    base = base.replace([np.inf, -np.inf], np.nan).fillna(0)\n    return base\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T14:24:48.637842Z","iopub.execute_input":"2025-10-20T14:24:48.638158Z","iopub.status.idle":"2025-10-20T14:24:48.655060Z","shell.execute_reply.started":"2025-10-20T14:24:48.638134Z","shell.execute_reply":"2025-10-20T14:24:48.653954Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"print(\"\\nðŸš€ Building train/test features v4...\")\ntrain_v4 = build_features(reference_data, monthly, customers)\ntest_v4  = build_features(reference_data_test, monthly, customers)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T14:24:57.747551Z","iopub.execute_input":"2025-10-20T14:24:57.748334Z","iopub.status.idle":"2025-10-20T14:25:05.897516Z","shell.execute_reply.started":"2025-10-20T14:24:57.748305Z","shell.execute_reply":"2025-10-20T14:25:05.896772Z"}},"outputs":[{"name":"stdout","text":"\nðŸš€ Building train/test features v4...\n","output_type":"stream"},{"name":"stderr","text":"Windows: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:02<00:00,  1.02it/s]\nWindows: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:01<00:00,  2.03it/s]\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"\ntrain_v4.to_csv(\"train_features_v4.csv\", index=False)\ntest_v4.to_csv(\"test_features_v4.csv\", index=False)\nprint(\"ðŸ’¾ Saved: train_features_v4.csv & test_features_v4.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-20T14:26:47.618262Z","iopub.execute_input":"2025-10-20T14:26:47.618597Z","iopub.status.idle":"2025-10-20T14:27:05.799876Z","shell.execute_reply.started":"2025-10-20T14:26:47.618575Z","shell.execute_reply":"2025-10-20T14:27:05.799123Z"}},"outputs":[{"name":"stdout","text":"ðŸ’¾ Saved: train_features_v4.csv & test_features_v4.csv\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}